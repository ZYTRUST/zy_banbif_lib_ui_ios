// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name zy_banbif_lib_ui_ios
import CoreText
import Foundation
import Lottie
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import zy_banbif_lib_ui_ios
extension UIKit.UIColor {
  convenience public init?(hex: Swift.String)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public class func showLoadingProgress(onView: UIKit.UIView) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public class func hideLoadingProgress(loadingProgress: UIKit.UIView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ParentViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIImage {
  public static func pixel(ofColor color: UIKit.UIColor) -> UIKit.UIImage
}
public class ZyApiUI {
  public typealias CallbackConfirmUI = (zy_banbif_lib_ui_ios.ZyUIConfirmResult<Swift.Bool, Swift.Bool, Swift.Bool>) -> Swift.Void
  public typealias CallbackAlertUI = (zy_banbif_lib_ui_ios.ZyUIAlertResult<Swift.Bool>) -> Swift.Void
  public typealias CallbackStepsUI = (zy_banbif_lib_ui_ios.ZyUIStepsResult<Swift.Bool, Swift.Bool>) -> Swift.Void
  public init(onView: UIKit.UIViewController)
  public func showConfirm(request: zy_banbif_lib_ui_ios.ZyUIRequest, completion: @escaping zy_banbif_lib_ui_ios.ZyApiUI.CallbackConfirmUI)
  public func showAlert(request: zy_banbif_lib_ui_ios.ZyUIRequest, completion: @escaping zy_banbif_lib_ui_ios.ZyApiUI.CallbackAlertUI)
  public func showSteps(request: zy_banbif_lib_ui_ios.ZyStepsUIRequest, completion: @escaping zy_banbif_lib_ui_ios.ZyApiUI.CallbackStepsUI)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FontLoader {
  @objc deinit
}
public class ZyLoadingApiUI {
  public typealias CallbackLoadingUI = (zy_banbif_lib_ui_ios.ZyUILoadingResult<Swift.Bool, Swift.Bool>) -> Swift.Void
  public init(onView: UIKit.UIViewController)
  public func showConfirm(request: zy_banbif_lib_ui_ios.ZyUILoadingRequest, completion: @escaping zy_banbif_lib_ui_ios.ZyLoadingApiUI.CallbackLoadingUI)
  @objc deinit
}
public struct ZyUILoadingRequest {
  public init()
  public var message: Swift.String?
  public var animated: Swift.Bool
}
public enum ZyUILoadingResult<T, C> {
  case ok(T)
  case cancel(C)
}
public struct ZyStepsUIRequest {
  public init()
  public var psTypeFlow: Swift.Int
  public var psDescriptionTypeFlow: Swift.String
  public var psStepPositionNumber: Swift.Int
  public var psButtonContinueText: Swift.String
}
public enum ZyUIStepsResult<T, C> {
  case ok(T)
  case cancel(C)
}
public enum ZyUIStepsEnum : Swift.Int {
  case START
  case OCR
  public var descripcion: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct ZyUIRequest {
  public init()
  public var message: Swift.String?
  public var description: Swift.String?
  public var lblOk: Swift.String?
  public var titleHexColorOk: Swift.String
  public var bgHexColorOk: Swift.String
  public var lblCancel2: Swift.String?
  public var titleHexColorCancel: Swift.String
  public var bgHexColorCancel: Swift.String
  public var animated: Swift.Bool
}
public enum ZyUIConfirmResult<T, C, C2> {
  case ok(T)
  case cancel(C)
  case cancel_2(C2)
}
public enum ZyUIAlertResult<T> {
  case ok(T)
}
public class ZyUILoadingApi : zy_banbif_lib_ui_ios.ZyUILoadingDelegateProtocol {
  public typealias CallbackLoadingUI = (zy_banbif_lib_ui_ios.ZyUILoadingResult<Swift.Bool, Swift.Bool>) -> Swift.Void
  public init(onView: UIKit.UIViewController)
  public func showConfirm(request: zy_banbif_lib_ui_ios.ZyUILoadingRequest, completion: @escaping zy_banbif_lib_ui_ios.ZyUILoadingApi.CallbackLoadingUI)
  public func ok(data: Swift.String)
  public func cancel(data: Swift.String)
  @objc deinit
}
public protocol ZyUILoadingDelegateProtocol {
  func ok(data: Swift.String)
  func cancel(data: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ZyUILoadingView : zy_banbif_lib_ui_ios.ParentViewController {
  @_Concurrency.MainActor(unsafe) public var request: zy_banbif_lib_ui_ios.ZyUILoadingRequest
  @_Concurrency.MainActor(unsafe) public var delegate: (any zy_banbif_lib_ui_ios.ZyUILoadingDelegateProtocol)?
  @_Concurrency.MainActor(unsafe) public var myOrientation: UIKit.UIInterfaceOrientationMask
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var imvLoading: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var textUi: UIKit.UILabel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension zy_banbif_lib_ui_ios.ZyUIStepsEnum : Swift.Equatable {}
extension zy_banbif_lib_ui_ios.ZyUIStepsEnum : Swift.Hashable {}
extension zy_banbif_lib_ui_ios.ZyUIStepsEnum : Swift.RawRepresentable {}
